#version 300 es
in vec4 vPosition;
in vec3 vNormal;

out vec3 vReflectDir;

uniform vec3 theta;
uniform vec3 cameraPosition;

void main()
{
    vec3 angles = radians(theta);
    vec3 c = cos(angles);
    vec3 s = sin(angles);

    mat4 rx = mat4(
        1.0,  0.0,  0.0, 0.0,
        0.0,  c.x, -s.x, 0.0,
        0.0,  s.x,  c.x, 0.0,
        0.0,  0.0,  0.0, 1.0
    );

    mat4 ry = mat4(
        c.y,  0.0,  s.y, 0.0,
        0.0,  1.0,  0.0, 0.0,
       -s.y,  0.0,  c.y, 0.0,
        0.0,  0.0,  0.0, 1.0
    );

    mat4 rz = mat4(
        c.z, -s.z,  0.0, 0.0,
        s.z,  c.z,  0.0, 0.0,
        0.0,  0.0,  1.0, 0.0,
        0.0,  0.0,  0.0, 1.0
    );

    float aspect = 1.0;
    float fovy = radians(60.0);
    float near = 0.1;
    float far = 100.0;
    float f = 1.0 / tan(fovy / 2.0);
    
    mat4 projectionMatrix = mat4(
        f/aspect, 0.0, 0.0, 0.0,
        0.0, f, 0.0, 0.0,
        0.0, 0.0, (far+near)/(near-far), -1.0,
        0.0, 0.0, (2.0*far*near)/(near-far), 0.0
    );

    mat4 modelMatrix = rz * ry * rx;
    vec4 pos = modelMatrix * vPosition;

    vec3 normal = normalize(mat3(modelMatrix) * vNormal);
    vec3 viewDir = normalize(pos.xyz - cameraPosition);
    vReflectDir = reflect(viewDir, normal);

    gl_Position = projectionMatrix * pos;
} 